-- online_sales_data_analysis.sql

-- average daily orders
SELECT AVG(daily_orders) AS avg_daily_orders
FROM (
  SELECT DATE(invoice_date) AS day, COUNT(*) AS daily_orders
  FROM online_sales1
  WHERE return_status != 'Returned'
  GROUP BY day
) AS daily;

-- average daily sales
SELECT AVG(daily_sales) AS avg_daily_sales
FROM (
  SELECT DATE(invoice_date) AS day, SUM(total_sales) AS daily_sales
  FROM online_sales1
  WHERE return_status != 'Returned'
  GROUP BY day
) AS daily;

-- average weekly orders
SELECT AVG(weekly_orders) AS avg_weekly_orders
FROM (
  SELECT DATE_TRUNC('week', invoice_date) AS week, COUNT(*) AS weekly_orders
  FROM online_sales1
  WHERE return_status != 'Returned'
  GROUP BY week
) AS weekly;

-- average weekly sales
SELECT AVG(weekly_sales) AS avg_weekly_sales
FROM (
  SELECT DATE_TRUNC('week', invoice_date) AS week, SUM(total_sales) AS weekly_sales
  FROM online_sales1
  WHERE return_status != 'Returned'
  GROUP BY week
) AS weekly;

-- average monthly orders
SELECT AVG(monthly_orders) AS avg_monthly_orders
FROM (
  SELECT DATE_TRUNC('month', invoice_date) AS month, COUNT(*) AS monthly_orders
  FROM online_sales1
  WHERE return_status != 'Returned'
  GROUP BY month
) AS monthly;

-- average monthly sales
SELECT AVG(monthly_sales) AS avg_monthly_sales
FROM (
  SELECT DATE_TRUNC('month', invoice_date) AS month, SUM(total_sales) AS monthly_sales
  FROM online_sales1
  WHERE return_status != 'Returned'
  GROUP BY month
) AS monthly;

-- total orders excluding returns
SELECT COUNT(*) AS total_orders
FROM online_sales1
WHERE return_status != 'Returned';

-- average order value
SELECT AVG(total_sales) AS average_order_value
FROM online_sales1
WHERE return_status != 'Returned';

-- percentage of returned products
SELECT 
  ROUND(100.0 * COUNT(*) FILTER (WHERE return_status = 'Returned') / COUNT(*), 2) AS percent_returned
FROM online_sales1;

-- total sales
SELECT SUM(total_sales) AS total_sales_value
FROM online_sales1
WHERE return_status != 'Returned';

-- value of returned orders
SELECT SUM(total_sales) AS total_value_returned_orders
FROM online_sales1
WHERE return_status = 'Returned';

-- net sales
SELECT
  (SELECT SUM(total_sales) FROM online_sales1 WHERE return_status != 'Returned') -
  (SELECT SUM(total_sales) FROM online_sales1 WHERE return_status = 'Returned') AS net_sales;

-- total monthly sales
SELECT
  EXTRACT(YEAR FROM invoice_date) AS year,
  EXTRACT(MONTH FROM invoice_date) AS month,
  SUM(total_sales) AS monthly_sales
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY year, month
ORDER BY year, month;

-- highest revenue product
SELECT stock_code, description, SUM(total_sales) AS product_sales
FROM online_sales1
GROUP BY stock_code, description
ORDER BY product_sales DESC
LIMIT 1;

-- top 5 countries generating sales
SELECT country, SUM(total_sales) AS total_sales
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY country
ORDER BY total_sales DESC
LIMIT 5;

-- total sales with discount and without discount
SELECT
  CASE WHEN discount IS NOT NULL AND discount > 0 THEN 'With Discount' ELSE 'No Discount' END AS discount_status,
  SUM(total_sales) AS total_sales
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY discount_status;

-- order priority generating more sales
SELECT order_priority, SUM(total_sales) AS total_sales
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY order_priority
ORDER BY total_sales DESC;

-- order priority with most orders
SELECT order_priority, COUNT(*) AS total_orders
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY order_priority
ORDER BY total_orders DESC;

-- payment method and percentage of orders processed through each method
SELECT
  payment_method,
  COUNT(*) AS order_count,
  ROUND(100.0 * COUNT(*) / SUM(COUNT(*)) OVER (), 2) AS percent_of_orders
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY payment_method
ORDER BY percent_of_orders DESC;

-- total orders made by each sales channel
SELECT
  sales_channel,
  COUNT(*) AS total_orders
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY sales_channel
ORDER BY total_orders DESC;

-- total sales generated by each sales channel
SELECT
  sales_channel,
  SUM(total_sales) AS total_sales
FROM online_sales1
WHERE return_status != 'Returned'
GROUP BY sales_channel
ORDER BY total_sales DESC;
